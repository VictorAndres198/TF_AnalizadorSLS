package tf.analizador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal Let, In, Where, If, Then, Else, Case, Of, Data, Type, Int, Double, Char, Bool,
    Igual, Suma, Resta, Multiplicacion, Division, Modulo, Potencia,
    Identificador, Numero, Linea, Flecha_D, Flecha_I, DosPuntos_Doble, Coma,
    Mayor_que, Mayor_igual_que, Menor_que, Menor_igual_que,Igual_a,And, Or, 
    Guarda, Dolar, Lambda, Parentesis_a, Parentesis_c, Llave_a, Llave_c,
    Corchete_a, Corchete_c, ERROR;

non terminal INICIO, EXPRESION, DECLARACION, FUNCION, GUARDAS, CASO, ARGUMENTOS, BLOQUE;

start with INICIO;

INICIO ::= BLOQUE;

BLOQUE ::= FUNCION BLOQUE
         | FUNCION
         | Linea BLOQUE
         | Linea;

FUNCION ::= Identificador ARGUMENTOS Igual EXPRESION Linea;

ARGUMENTOS ::= Identificador ARGUMENTOS
             | Identificador;

EXPRESION ::= Numero
            | Identificador;
            /* prediente de revision esto de aca
            | EXPRESION Suma EXPRESION
            | EXPRESION Resta EXPRESION
            | EXPRESION Multiplicacion EXPRESION
            | EXPRESION Division EXPRESION
            | EXPRESION Modulo EXPRESION
            | EXPRESION Potencia EXPRESION
            | Parentesis_a EXPRESION Parentesis_c
            | Identificador ARGUMENTOS;
            */

GUARDAS ::= Guarda EXPRESION Igual EXPRESION;

CASO ::= Case EXPRESION Of { GUARDAS };

IF ::= If EXPRESION Then EXPRESION Else EXPRESION;

%%

