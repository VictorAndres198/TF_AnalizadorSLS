package tf.analizador;

import java_cup.runtime.Symbol;

parser code {:
    private Symbol s = null;
    public boolean errorDetected = false;
    public boolean parsingCompleted = false;

    @Override
    public void syntax_error(Symbol s){
        this.s = s;
        if (s.value != null) {
            System.err.println("Error de sintaxis. Línea: " + (s.left + 1) + " Columna: " + (s.right + 1) + ", Texto: \"" + s.value + "\"");
            errorDetected = true;
        } else {
            errorDetected = false;
        }
    }

    public Symbol getS(){
        return this.s;
    }

    public Boolean errorD(){
        return errorDetected;
    }

    @Override
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        super.report_fatal_error(message, info);
        System.err.println("==========report_fatal_error==========");
        System.err.println(message);
        System.err.println(info);
    }

    @Override
    public void done_parsing() {
        if (!errorDetected) {
            System.out.println("Análisis sintáctico completado sin errores.");
        }
        parsingCompleted = true; // Set the parsing completed flag
        System.err.println("==========done_parsing()==========");
        System.err.println("errorDetected es: " + errorDetected);
        System.err.println("parsingCompleted es: " + parsingCompleted);        
    }

    public boolean isParsingCompleted() {
        System.err.println("==========isParsingCompleted()==========");  
        System.err.println("parsingCompleted es: " + parsingCompleted);  
        return parsingCompleted;
    }
:};

terminal Let, In, Where, If, Then, Else, Case, Of, Data, Type, Int, Double, Char, Bool,
    Igual, Suma, Resta, Multiplicacion, Division, Modulo, Potencia, Flecha_GD,
    Identificador, Linea, Flecha_D, Flecha_I, DosPuntos_Doble, Coma,
    Mayor_que, Mayor_igual_que, Menor_que, Menor_igual_que, Igual_a, And, Or, 
    Guarda, Dolar, Lambda, Parentesis_a, Parentesis_c, Llave_a, Llave_c,
    Corchete_a, Corchete_c, Cadena, ERROR;

non terminal INICIO, BLOQUE, FUNCION, ARGUMENTOS, EXPRESION, TERM, FACTOR, ATOM, GUARDAS,
    CASO, IF_ELSE, TIPO, TIPOSIMPLE, CAMPO,CAMPOS, TIPOFUNCION, TIPOESTRUCTURADEDATOS;

precedence left Suma, Resta;
precedence left Multiplicacion, Division, Modulo;
precedence right Potencia;
precedence left Igual_a, Mayor_que, Mayor_igual_que, Menor_que, Menor_igual_que;
precedence left And, Or;
precedence left Flecha_D;
precedence right Cadena;
precedence right Linea;
precedence right Int,Double,Identificador;

start with INICIO;

INICIO ::= BLOQUE;

BLOQUE ::= FUNCION BLOQUE
         | FUNCION
         | Linea BLOQUE
         | Linea         
         | Let EXPRESION Linea BLOQUE
         | Let EXPRESION Linea
         | Let EXPRESION Igual EXPRESION Linea BLOQUE
         | Let EXPRESION Igual EXPRESION Linea;

FUNCION ::= Identificador ARGUMENTOS Igual EXPRESION Linea
         |  Identificador DosPuntos_Doble TIPO Linea
         |  Identificador DosPuntos_Doble TIPO Parentesis_a Parentesis_c Linea
         |  Identificador ARGUMENTOS GUARDAS Linea
         |  Identificador Igual EXPRESION Linea;

ARGUMENTOS ::= Identificador ARGUMENTOS
             | Identificador
             | Int ARGUMENTOS
             | Int
             | Double ARGUMENTOS
             | Double;

TIPO ::= TIPOSIMPLE
       | TIPOFUNCION
       | TIPOESTRUCTURADEDATOS;

TIPOSIMPLE ::= Int
             | Double
             | Char
             | Bool
             | Identificador;

TIPOFUNCION ::= TIPO Flecha_D TIPO
			 |  TIPO Identificador Flecha_GD TIPO;

TIPOESTRUCTURADEDATOS ::= Data Identificador Llave_a CAMPOS Llave_c;

CAMPOS ::= CAMPO
         | CAMPOS Coma CAMPO;

CAMPO ::= Identificador DosPuntos_Doble TIPO;

EXPRESION ::= EXPRESION Suma EXPRESION
            | EXPRESION Resta EXPRESION
            | EXPRESION Igual_a EXPRESION
            | EXPRESION Mayor_que EXPRESION
            | EXPRESION Mayor_igual_que EXPRESION
            | EXPRESION Menor_que EXPRESION
            | EXPRESION Menor_igual_que EXPRESION
            | EXPRESION And EXPRESION
            | EXPRESION Or EXPRESION
            | EXPRESION Flecha_D EXPRESION
            | EXPRESION Flecha_D Cadena EXPRESION
			| EXPRESION Flecha_D Cadena
            | Linea EXPRESION Linea EXPRESION
            | Linea EXPRESION Linea
            | Linea EXPRESION
            | TERM;

TERM ::= TERM Multiplicacion TERM
        | TERM Division TERM
        | TERM Modulo TERM
        | FACTOR;

FACTOR ::= FACTOR Potencia FACTOR
         | ATOM;

ATOM ::= Parentesis_a EXPRESION Parentesis_c
        | Identificador ARGUMENTOS
        | Identificador
        | Int
        | Double
        | Identificador Parentesis_a EXPRESION Parentesis_c
        | Identificador Parentesis_a EXPRESION Parentesis_c Parentesis_a EXPRESION Parentesis_c
        | IF_ELSE
        | CASO;

IF_ELSE ::= If EXPRESION Then EXPRESION Else EXPRESION;

CASO ::= Case EXPRESION Of Llave_a GUARDAS Llave_c
	  |  Case EXPRESION Of Llave_a EXPRESION Llave_c
	  |  Case EXPRESION Of EXPRESION;

GUARDAS ::= Guarda EXPRESION Igual EXPRESION
          | Guarda Cadena Igual EXPRESION
          | Guarda EXPRESION Igual Cadena
          | Guarda Cadena Igual Cadena
          | GUARDAS Guarda EXPRESION Igual EXPRESION
          | GUARDAS Guarda Cadena Igual EXPRESION
          | GUARDAS Guarda EXPRESION Igual Cadena
          | GUARDAS Guarda Cadena Igual Cadena
          | Linea GUARDAS Linea GUARDAS
          | Linea GUARDAS Linea
          | Linea GUARDAS;
