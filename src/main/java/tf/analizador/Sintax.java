
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package tf.analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\007\000\002\005\004\000\002\005\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\003\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\011\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\014\010\000\002\013\010\000\002\012\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\015\005\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\006\031\007\033\004\001\002\000\010\002" +
    "\ufffc\031\007\033\004\001\002\000\010\002\ufffe\031\007" +
    "\033\004\001\002\000\004\002\000\001\002\000\004\031" +
    "\013\001\002\000\004\002\011\001\002\000\004\002\001" +
    "\001\002\000\004\022\015\001\002\000\060\010\ufff9\011" +
    "\ufff9\013\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\013\033\ufff9\036\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9" +
    "\053\ufff9\055\ufff9\001\002\000\056\010\ufffa\011\ufffa\013" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\033\ufffa\036\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\053\ufffa\055\ufffa" +
    "\001\002\000\014\007\016\012\020\031\026\032\027\052" +
    "\023\001\002\000\014\007\016\012\020\031\026\032\027" +
    "\052\023\001\002\000\056\010\uffee\011\uffee\013\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\116\026\114\027\115\030\uffee" +
    "\033\uffee\036\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\053\uffee\055\uffee\001\002" +
    "\000\014\007\016\012\020\031\026\032\027\052\023\001" +
    "\002\000\056\010\uffe2\011\uffe2\013\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\033\uffe2\036" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\053\uffe2\055\uffe2\001\002\000\056\010" +
    "\uffea\011\uffea\013\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\070\033\uffea\036\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea" +
    "\053\uffea\055\uffea\001\002\000\014\007\016\012\020\031" +
    "\026\032\027\052\023\001\002\000\056\010\uffe8\011\uffe8" +
    "\013\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\033\uffe8\036\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\053\uffe8\055" +
    "\uffe8\001\002\000\056\010\uffe3\011\uffe3\013\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\033" +
    "\uffe3\036\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\053\uffe3\055\uffe3\001\002\000" +
    "\060\010\uffe4\011\uffe4\013\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\013\033\uffe4\036" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\053\uffe4\055\uffe4\001\002\000\056\010" +
    "\uffe5\011\uffe5\013\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\033\uffe5\036\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\053\uffe5\055\uffe5\001\002\000\030\023\035\024\041\033" +
    "\033\036\042\040\031\041\043\042\036\043\037\044\040" +
    "\045\032\046\034\001\002\000\014\007\016\012\020\031" +
    "\026\032\027\052\023\001\002\000\014\007\016\012\020" +
    "\031\026\032\027\052\023\001\002\000\010\002\ufffb\031" +
    "\ufffb\033\ufffb\001\002\000\014\007\016\012\020\031\026" +
    "\032\027\052\023\001\002\000\014\007\016\012\020\031" +
    "\026\032\027\052\023\001\002\000\014\007\016\012\020" +
    "\031\026\032\027\052\023\001\002\000\014\007\016\012" +
    "\020\031\026\032\027\052\023\001\002\000\014\007\016" +
    "\012\020\031\026\032\027\052\023\001\002\000\014\007" +
    "\016\012\020\031\026\032\027\052\023\001\002\000\004" +
    "\031\045\001\002\000\014\007\016\012\020\031\026\032" +
    "\027\052\023\001\002\000\056\010\ufff4\011\ufff4\013\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\033\ufff4\036\042\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\045\032\046\034\047\ufff4\053\ufff4\055\ufff4\001" +
    "\002\000\004\036\047\001\002\000\056\010\uffef\011\uffef" +
    "\013\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\033\uffef\036\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\053\uffef\055" +
    "\uffef\001\002\000\012\016\053\017\052\020\050\021\054" +
    "\001\002\000\056\010\uffd4\011\uffd4\013\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\033\uffd4" +
    "\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\053\uffd4\055\uffd4\001\002\000\056" +
    "\010\uffd7\011\uffd7\013\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\033\uffd7\036\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\053\uffd7\055\uffd7\001\002\000\056\010\uffd5\011\uffd5" +
    "\013\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\033\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\053\uffd5\055" +
    "\uffd5\001\002\000\056\010\uffd6\011\uffd6\013\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\033" +
    "\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\053\uffd6\055\uffd6\001\002\000" +
    "\056\010\uffd3\011\uffd3\013\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\033\uffd3\036\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\053\uffd3\055\uffd3\001\002\000\056\010\ufff7\011" +
    "\ufff7\013\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\033\ufff7\036\042\040\031\041\043\042" +
    "\036\043\037\044\040\045\032\046\034\047\ufff7\053\ufff7" +
    "\055\ufff7\001\002\000\056\010\ufff6\011\ufff6\013\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\033\ufff6\036\042\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\032\046\034\047\ufff6\053\ufff6\055\ufff6\001\002" +
    "\000\056\010\ufff2\011\ufff2\013\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\033\ufff2\036\042" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\032\046" +
    "\034\047\ufff2\053\ufff2\055\ufff2\001\002\000\056\010\ufff3" +
    "\011\ufff3\013\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\033\ufff3\036\042\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\045\032\046\034\047\ufff3\053" +
    "\ufff3\055\ufff3\001\002\000\056\010\ufff8\011\ufff8\013\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\033\ufff8\036\042\040\031\041\043\042\036\043\037" +
    "\044\040\045\032\046\034\047\ufff8\053\ufff8\055\ufff8\001" +
    "\002\000\056\010\ufff0\011\ufff0\013\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\033\ufff0\036" +
    "\042\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\053\ufff0\055\ufff0\001\002\000\056\010" +
    "\ufff1\011\ufff1\013\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\033\ufff1\036\042\040\ufff1\041" +
    "\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\053\ufff1\055\ufff1\001\002\000\056\010\ufff5\011\ufff5\013" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\033\ufff5\036\042\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\045\032\046\034\047\ufff5\053\ufff5\055\ufff5" +
    "\001\002\000\056\010\uffe6\011\uffe6\013\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\033\uffe6" +
    "\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\053\uffe6\055\uffe6\001\002\000\030" +
    "\023\035\024\041\036\042\040\031\041\043\042\036\043" +
    "\037\044\040\045\032\046\034\053\067\001\002\000\056" +
    "\010\uffe7\011\uffe7\013\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\033\uffe7\036\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\053\uffe7\055\uffe7\001\002\000\014\007\016\012\020" +
    "\031\026\032\027\052\023\001\002\000\056\010\uffe9\011" +
    "\uffe9\013\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\070\033\uffe9\036\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\053\uffe9" +
    "\055\uffe9\001\002\000\030\013\073\023\035\024\041\036" +
    "\042\040\031\041\043\042\036\043\037\044\040\045\032" +
    "\046\034\001\002\000\004\054\074\001\002\000\004\047" +
    "\076\001\002\000\004\055\113\001\002\000\016\007\016" +
    "\012\020\031\026\032\027\052\023\060\077\001\002\000" +
    "\004\022\106\001\002\000\030\022\101\023\035\024\041" +
    "\036\042\040\031\041\043\042\036\043\037\044\040\045" +
    "\032\046\034\001\002\000\016\007\016\012\020\031\026" +
    "\032\027\052\023\060\102\001\002\000\006\047\076\055" +
    "\uffdd\001\002\000\032\023\035\024\041\036\042\040\031" +
    "\041\043\042\036\043\037\044\040\045\032\046\034\047" +
    "\076\055\uffdf\001\002\000\004\055\uffdb\001\002\000\004" +
    "\055\uffd9\001\002\000\016\007\016\012\020\031\026\032" +
    "\027\052\023\060\107\001\002\000\006\047\076\055\uffdc" +
    "\001\002\000\032\023\035\024\041\036\042\040\031\041" +
    "\043\042\036\043\037\044\040\045\032\046\034\047\076" +
    "\055\uffde\001\002\000\004\055\uffda\001\002\000\004\055" +
    "\uffd8\001\002\000\056\010\uffe0\011\uffe0\013\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\033" +
    "\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\053\uffe0\055\uffe0\001\002\000" +
    "\014\007\016\012\020\031\026\032\027\052\023\001\002" +
    "\000\014\007\016\012\020\031\026\032\027\052\023\001" +
    "\002\000\014\007\016\012\020\031\026\032\027\052\023" +
    "\001\002\000\056\010\uffed\011\uffed\013\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\033\uffed" +
    "\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\053\uffed\055\uffed\001\002\000\056" +
    "\010\uffeb\011\uffeb\013\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\033\uffeb\036\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\053\uffeb\055\uffeb\001\002\000\056\010\uffec\011\uffec" +
    "\013\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\033\uffec\036\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\053\uffec\055" +
    "\uffec\001\002\000\030\010\123\023\035\024\041\036\042" +
    "\040\031\041\043\042\036\043\037\044\040\045\032\046" +
    "\034\001\002\000\014\007\016\012\020\031\026\032\027" +
    "\052\023\001\002\000\030\011\125\023\035\024\041\036" +
    "\042\040\031\041\043\042\036\043\037\044\040\045\032" +
    "\046\034\001\002\000\014\007\016\012\020\031\026\032" +
    "\027\052\023\001\002\000\056\010\uffe1\011\uffe1\013\uffe1" +
    "\022\uffe1\023\035\024\041\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\033\uffe1\036\042\040\031\041\043\042\036\043\037" +
    "\044\040\045\032\046\034\047\uffe1\053\uffe1\055\uffe1\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\010\002\007\003\005\004\004\001\001\000" +
    "\006\003\127\004\004\001\001\000\006\003\126\004\004" +
    "\001\001\000\002\001\001\000\004\005\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\013\001\001\000\002\001\001\000\016\006\027\007" +
    "\016\010\021\011\023\013\020\014\024\001\001\000\016" +
    "\006\121\007\016\010\021\011\023\013\020\014\024\001" +
    "\001\000\002\001\001\000\016\006\071\007\016\010\021" +
    "\011\023\013\020\014\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\065\007\016\010\021\011\023" +
    "\013\020\014\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\063\007\016\010\021\011\023\013" +
    "\020\014\024\001\001\000\016\006\062\007\016\010\021" +
    "\011\023\013\020\014\024\001\001\000\002\001\001\000" +
    "\016\006\061\007\016\010\021\011\023\013\020\014\024" +
    "\001\001\000\016\006\060\007\016\010\021\011\023\013" +
    "\020\014\024\001\001\000\016\006\057\007\016\010\021" +
    "\011\023\013\020\014\024\001\001\000\016\006\056\007" +
    "\016\010\021\011\023\013\020\014\024\001\001\000\016" +
    "\006\055\007\016\010\021\011\023\013\020\014\024\001" +
    "\001\000\016\006\054\007\016\010\021\011\023\013\020" +
    "\014\024\001\001\000\004\015\045\001\001\000\016\006" +
    "\043\007\016\010\021\011\023\013\020\014\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\070\011\023\013\020\014" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\074\001\001\000\002\001\001\000" +
    "\016\006\077\007\016\010\021\011\023\013\020\014\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\102\007\016\010\021\011\023\013\020\014\024\001\001" +
    "\000\004\012\104\001\001\000\004\012\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\107\007\016" +
    "\010\021\011\023\013\020\014\024\001\001\000\004\012" +
    "\111\001\001\000\004\012\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\120\010" +
    "\021\011\023\013\020\014\024\001\001\000\014\007\117" +
    "\010\021\011\023\013\020\014\024\001\001\000\014\007" +
    "\116\010\021\011\023\013\020\014\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\123\007\016\010\021\011\023\013\020" +
    "\014\024\001\001\000\002\001\001\000\016\006\125\007" +
    "\016\010\021\011\023\013\020\014\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s = null;
    public boolean errorDetected = false;
    public boolean parsingCompleted = false;

    @Override
    public void syntax_error(Symbol s){
        this.s = s;
        if (s.value != null) {
            System.err.println("Error de sintaxis. Línea: " + (s.left + 1) + " Columna: " + (s.right + 1) + ", Texto: \"" + s.value + "\"");
            errorDetected = true;
        } else {
            errorDetected = false;
        }
    }

    public Symbol getS(){
        return this.s;
    }

    public Boolean errorD(){
        return errorDetected;
    }

    @Override
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        super.report_fatal_error(message, info);
        System.err.println("==========report_fatal_error==========");
        System.err.println(message);
        System.err.println(info);
    }

    @Override
    public void done_parsing() {
        if (!errorDetected) {
            System.out.println("Análisis sintáctico completado sin errores.");
        }
        parsingCompleted = true; // Set the parsing completed flag
        System.err.println("==========done_parsing()==========");
        System.err.println("errorDetected es: " + errorDetected);
        System.err.println("parsingCompleted es: " + parsingCompleted);        
    }

    public boolean isParsingCompleted() {
        System.err.println("==========isParsingCompleted()==========");  
        System.err.println("parsingCompleted es: " + parsingCompleted);  
        return parsingCompleted;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= FUNCION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE ::= Linea BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE ::= Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCION ::= Identificador ARGUMENTOS Igual EXPRESION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGUMENTOS ::= Identificador ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARGUMENTOS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPRESION ::= EXPRESION Igual_a EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESION ::= EXPRESION Mayor_que EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESION ::= EXPRESION Mayor_igual_que EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESION ::= EXPRESION Menor_que EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= EXPRESION Menor_igual_que EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= EXPRESION And EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= EXPRESION Or EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= EXPRESION DosPuntos_Doble TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TERM ::= TERM Multiplicacion TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TERM ::= TERM Division TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TERM ::= TERM Modulo TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TERM ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FACTOR ::= FACTOR Potencia FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FACTOR ::= ATOM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATOM ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATOM ::= Identificador ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATOM ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATOM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATOM ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATOM ::= CASO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IF_ELSE ::= If EXPRESION Then EXPRESION Else EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASO ::= Case EXPRESION Of Llave_a GUARDAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GUARDAS ::= Guarda EXPRESION Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GUARDAS ::= Guarda Cadena Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // GUARDAS ::= Guarda EXPRESION Igual Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // GUARDAS ::= Guarda Cadena Igual Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // GUARDAS ::= Guarda EXPRESION Igual EXPRESION GUARDAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // GUARDAS ::= Guarda Cadena Igual EXPRESION GUARDAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // GUARDAS ::= Guarda EXPRESION Igual Cadena GUARDAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // GUARDAS ::= Guarda Cadena Igual Cadena GUARDAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= Identificador DosPuntos_Doble TipoBase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TipoBase ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoBase",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TipoBase ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoBase",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TipoBase ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoBase",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TipoBase ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoBase",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
