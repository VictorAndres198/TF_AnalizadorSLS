
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package tf.analizador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\006\000\002\003\005\000\002\003\010\000" +
    "\002\003\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\010\000\002\004\006\000\002\004\006\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\021\005\000\002\021\006\000\002\022\007" +
    "\000\002\020\003\000\002\020\005\000\002\017\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\006\000\002\006\005\000\002\006\006\000" +
    "\002\006\005\000\002\006\004\000\002\006\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\005" +
    "\000\002\011\004\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\006\000\002\011\011\000\002" +
    "\011\003\000\002\011\003\000\002\014\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\006\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\007\000\002\012\007\000\002\012\007\000\002" +
    "\012\007\000\002\012\006\000\002\012\005\000\002\012" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\004\004\032\010\033\005\001\002\000" +
    "\020\007\021\012\023\016\032\017\034\032\033\033\031" +
    "\052\025\001\002\000\012\002\ufffc\004\004\032\010\033" +
    "\005\001\002\000\012\002\ufffe\004\004\032\010\033\005" +
    "\001\002\000\004\002\000\001\002\000\014\016\017\017" +
    "\013\022\020\032\015\036\014\001\002\000\004\002\012" +
    "\001\002\000\004\002\001\001\002\000\064\010\uffed\011" +
    "\uffed\013\uffed\016\017\017\013\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\032\015\033\uffed\034" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\053\uffed\055\uffed\001\002\000\016\014" +
    "\174\016\170\017\175\020\166\021\171\032\173\001\002" +
    "\000\064\010\ufff1\011\ufff1\013\ufff1\016\017\017\013\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\032\015\033\ufff1\034\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\053\ufff1\055\ufff1" +
    "\001\002\000\010\022\157\033\140\047\111\001\002\000" +
    "\064\010\uffef\011\uffef\013\uffef\016\017\017\013\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\032" +
    "\015\033\uffef\034\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\047\uffef\053\uffef\055\uffef\001" +
    "\002\000\020\007\021\012\023\016\032\017\034\032\033" +
    "\033\031\052\025\001\002\000\020\007\021\012\023\016" +
    "\032\017\034\032\033\033\031\052\025\001\002\000\056" +
    "\010\uffcf\011\uffcf\013\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\144\026\142\027\143\030\uffcf\033\uffcf\034\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\053\uffcf\055\uffcf\001\002\000\020\007\021\012\023" +
    "\016\032\017\034\032\033\033\031\052\025\001\002\000" +
    "\056\010\uffc0\011\uffc0\013\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\033\uffc0\034\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\053\uffc0\055\uffc0\001\002\000\020\007\021\012" +
    "\023\016\032\017\034\032\033\033\031\052\025\001\002" +
    "\000\056\010\uffcb\011\uffcb\013\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\077\033\uffcb\034\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\053\uffcb\055\uffcb\001\002\000\056\010\uffc9" +
    "\011\uffc9\013\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\033\uffc9\034\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\053" +
    "\uffc9\055\uffc9\001\002\000\056\010\uffc1\011\uffc1\013\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\033\uffc1\034\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\053\uffc1\055\uffc1\001" +
    "\002\000\020\007\021\012\023\016\032\017\034\032\033" +
    "\033\031\052\025\001\002\000\056\010\uffc5\011\uffc5\013" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\033\uffc5\034\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\053\uffc5\055\uffc5" +
    "\001\002\000\066\010\uffc6\011\uffc6\013\uffc6\016\017\017" +
    "\013\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\032\015\033\uffc6\034\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\052\065" +
    "\053\uffc6\055\uffc6\001\002\000\056\010\uffc4\011\uffc4\013" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\033\uffc4\034\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\053\uffc4\055\uffc4" +
    "\001\002\000\030\023\043\024\047\033\042\034\036\040" +
    "\037\041\050\042\044\043\045\044\046\045\040\046\041" +
    "\001\002\000\022\007\021\012\023\016\032\017\034\032" +
    "\033\033\031\052\025\060\062\001\002\000\020\007\021" +
    "\012\023\016\032\017\034\032\033\033\031\052\025\001" +
    "\002\000\020\007\021\012\023\016\032\017\034\032\033" +
    "\033\031\052\025\001\002\000\020\007\021\012\023\016" +
    "\032\017\034\032\033\033\031\052\025\001\002\000\012" +
    "\002\ufff3\004\ufff3\032\ufff3\033\ufff3\001\002\000\020\007" +
    "\021\012\023\016\032\017\034\032\033\033\031\052\025" +
    "\001\002\000\020\007\021\012\023\016\032\017\034\032" +
    "\033\033\031\052\025\001\002\000\020\007\021\012\023" +
    "\016\032\017\034\032\033\033\031\052\025\001\002\000" +
    "\020\007\021\012\023\016\032\017\034\032\033\033\031" +
    "\052\025\001\002\000\020\007\021\012\023\016\032\017" +
    "\034\032\033\033\031\052\025\001\002\000\020\007\021" +
    "\012\023\016\032\017\034\032\033\033\031\052\025\001" +
    "\002\000\056\010\uffda\011\uffda\013\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\033\uffda\034" +
    "\036\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\040" +
    "\046\041\047\uffda\053\uffda\055\uffda\001\002\000\056\010" +
    "\uffdd\011\uffdd\013\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\033\uffdd\034\036\040\037\041" +
    "\050\042\044\043\045\044\046\045\040\046\041\047\uffdd" +
    "\053\uffdd\055\uffdd\001\002\000\056\010\uffdc\011\uffdc\013" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\033\uffdc\034\036\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\040\046\041\047\uffdc\053\uffdc\055\uffdc" +
    "\001\002\000\056\010\uffd8\011\uffd8\013\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\033\uffd8" +
    "\034\036\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\040\046\041\047\uffd8\053\uffd8\055\uffd8\001\002\000\056" +
    "\010\uffd9\011\uffd9\013\uffd9\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\033\uffd9\034\036\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\040\046\041\047" +
    "\uffd9\053\uffd9\055\uffd9\001\002\000\056\010\uffde\011\uffde" +
    "\013\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\033\uffde\034\036\040\037\041\050\042\044" +
    "\043\045\044\046\045\040\046\041\047\uffde\053\uffde\055" +
    "\uffde\001\002\000\056\010\uffd6\011\uffd6\013\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\033" +
    "\uffd6\034\036\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\053\uffd6\055\uffd6\001\002\000" +
    "\056\010\uffd7\011\uffd7\013\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\033\uffd7\034\036\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\053\uffd7\055\uffd7\001\002\000\056\010\uffdb\011" +
    "\uffdb\013\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\033\uffdb\034\036\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\040\046\041\047\uffdb\053\uffdb" +
    "\055\uffdb\001\002\000\072\007\021\010\uffd3\011\uffd3\012" +
    "\023\013\uffd3\016\032\017\034\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\032\033\033\031\034" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\052\025\053\uffd3\055\uffd3\001\002\000" +
    "\056\010\uffd5\011\uffd5\013\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\033\uffd5\034\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\053\uffd5\055\uffd5\001\002\000\056\010\uffd4\011" +
    "\uffd4\013\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\033\uffd4\034\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\053\uffd4" +
    "\055\uffd4\001\002\000\020\007\021\012\023\016\032\017" +
    "\034\032\033\033\031\052\025\001\002\000\056\010\uffc7" +
    "\011\uffc7\013\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\033\uffc7\034\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\053" +
    "\uffc7\055\uffc7\001\002\000\030\023\043\024\047\034\036" +
    "\040\037\041\050\042\044\043\045\044\046\045\040\046" +
    "\041\053\070\001\002\000\060\010\uffc3\011\uffc3\013\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\033\uffc3\034\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\052\071\053\uffc3\055" +
    "\uffc3\001\002\000\020\007\021\012\023\016\032\017\034" +
    "\032\033\033\031\052\025\001\002\000\030\023\043\024" +
    "\047\034\036\040\037\041\050\042\044\043\045\044\046" +
    "\045\040\046\041\053\073\001\002\000\056\010\uffc2\011" +
    "\uffc2\013\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\033\uffc2\034\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\053\uffc2" +
    "\055\uffc2\001\002\000\056\010\uffd0\011\uffd0\013\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\033\075\034\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\053\uffd0\055\uffd0\001\002" +
    "\000\072\007\021\010\uffd1\011\uffd1\012\023\013\uffd1\016" +
    "\032\017\034\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\032\033\033\031\034\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\052\025\053\uffd1\055\uffd1\001\002\000\056\010\uffd2\011" +
    "\uffd2\013\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\033\uffd2\034\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\053\uffd2" +
    "\055\uffd2\001\002\000\016\007\021\012\023\016\032\017" +
    "\034\032\033\052\025\001\002\000\056\010\uffca\011\uffca" +
    "\013\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\077\033\uffca\034\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\053\uffca\055" +
    "\uffca\001\002\000\030\023\043\024\047\034\036\040\037" +
    "\041\050\042\044\043\045\044\046\045\040\046\041\053" +
    "\102\001\002\000\056\010\uffc8\011\uffc8\013\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\033" +
    "\uffc8\034\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\053\uffc8\055\uffc8\001\002\000" +
    "\030\013\104\023\043\024\047\034\036\040\037\041\050" +
    "\042\044\043\045\044\046\045\040\046\041\001\002\000" +
    "\022\007\021\012\023\016\032\017\034\032\033\033\031" +
    "\052\025\054\105\001\002\000\022\007\021\012\023\016" +
    "\032\017\034\032\033\033\110\047\111\052\025\001\002" +
    "\000\056\010\uffbc\011\uffbc\013\uffbc\022\uffbc\023\043\024" +
    "\047\025\uffbc\026\uffbc\027\uffbc\030\uffbc\033\uffbc\034\036" +
    "\040\037\041\050\042\044\043\045\044\046\045\040\046" +
    "\041\047\uffbc\053\uffbc\055\uffbc\001\002\000\006\047\126" +
    "\055\141\001\002\000\022\007\021\012\023\016\032\017" +
    "\034\032\033\033\110\047\111\052\025\001\002\000\022" +
    "\007\021\012\023\016\032\017\034\032\033\033\031\052" +
    "\025\060\114\001\002\000\030\023\043\024\047\034\036" +
    "\040\037\041\050\042\044\043\045\044\046\045\040\046" +
    "\041\055\113\001\002\000\056\010\uffbd\011\uffbd\013\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\033\uffbd\034\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\053\uffbd\055\uffbd\001" +
    "\002\000\004\022\121\001\002\000\030\022\116\023\043" +
    "\024\047\034\036\040\037\041\050\042\044\043\045\044" +
    "\046\045\040\046\041\001\002\000\022\007\021\012\023" +
    "\016\032\017\034\032\033\033\031\052\025\060\117\001" +
    "\002\000\010\033\uffb9\047\uffb9\055\uffb9\001\002\000\034" +
    "\023\043\024\047\033\uffbb\034\036\040\037\041\050\042" +
    "\044\043\045\044\046\045\040\046\041\047\uffbb\055\uffbb" +
    "\001\002\000\022\007\021\012\023\016\032\017\034\032" +
    "\033\033\031\052\025\060\122\001\002\000\010\033\uffb8" +
    "\047\uffb8\055\uffb8\001\002\000\034\023\043\024\047\033" +
    "\uffba\034\036\040\037\041\050\042\044\043\045\044\046" +
    "\045\040\046\041\047\uffba\055\uffba\001\002\000\010\033" +
    "\125\047\uffb1\055\uffb1\001\002\000\010\033\140\047\uffb2" +
    "\055\uffb2\001\002\000\022\007\021\012\023\016\032\017" +
    "\034\032\033\033\031\052\025\060\127\001\002\000\004" +
    "\022\134\001\002\000\030\022\131\023\043\024\047\034" +
    "\036\040\037\041\050\042\044\043\045\044\046\045\040" +
    "\046\041\001\002\000\022\007\021\012\023\016\032\017" +
    "\034\032\033\033\031\052\025\060\132\001\002\000\010" +
    "\033\uffb5\047\uffb5\055\uffb5\001\002\000\034\023\043\024" +
    "\047\033\uffb7\034\036\040\037\041\050\042\044\043\045" +
    "\044\046\045\040\046\041\047\uffb7\055\uffb7\001\002\000" +
    "\022\007\021\012\023\016\032\017\034\032\033\033\031" +
    "\052\025\060\135\001\002\000\010\033\uffb4\047\uffb4\055" +
    "\uffb4\001\002\000\034\023\043\024\047\033\uffb6\034\036" +
    "\040\037\041\050\042\044\043\045\044\046\045\040\046" +
    "\041\047\uffb6\055\uffb6\001\002\000\010\033\uffb3\047\uffb3" +
    "\055\uffb3\001\002\000\006\033\140\047\111\001\002\000" +
    "\056\010\uffbe\011\uffbe\013\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\033\uffbe\034\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\053\uffbe\055\uffbe\001\002\000\016\007\021\012" +
    "\023\016\032\017\034\032\033\052\025\001\002\000\016" +
    "\007\021\012\023\016\032\017\034\032\033\052\025\001" +
    "\002\000\016\007\021\012\023\016\032\017\034\032\033" +
    "\052\025\001\002\000\056\010\uffce\011\uffce\013\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\033\uffce\034\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\053\uffce\055\uffce\001\002" +
    "\000\056\010\uffcc\011\uffcc\013\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\033\uffcc\034\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\053\uffcc\055\uffcc\001\002\000\056\010\uffcd" +
    "\011\uffcd\013\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\033\uffcd\034\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\053" +
    "\uffcd\055\uffcd\001\002\000\030\010\151\023\043\024\047" +
    "\034\036\040\037\041\050\042\044\043\045\044\046\045" +
    "\040\046\041\001\002\000\020\007\021\012\023\016\032" +
    "\017\034\032\033\033\031\052\025\001\002\000\030\011" +
    "\153\023\043\024\047\034\036\040\037\041\050\042\044" +
    "\043\045\044\046\045\040\046\041\001\002\000\020\007" +
    "\021\012\023\016\032\017\034\032\033\033\031\052\025" +
    "\001\002\000\056\010\uffbf\011\uffbf\013\uffbf\022\uffbf\023" +
    "\043\024\047\025\uffbf\026\uffbf\027\uffbf\030\uffbf\033\uffbf" +
    "\034\036\040\037\041\050\042\044\043\045\044\046\045" +
    "\040\046\041\047\uffbf\053\uffbf\055\uffbf\001\002\000\056" +
    "\010\ufff0\011\ufff0\013\ufff0\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\033\ufff0\034\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\053\ufff0\055\ufff0\001\002\000\006\033\162\047\126" +
    "\001\002\000\020\007\021\012\023\016\032\017\034\032" +
    "\033\033\031\052\025\001\002\000\030\023\043\024\047" +
    "\033\161\034\036\040\037\041\050\042\044\043\045\044" +
    "\046\045\040\046\041\001\002\000\012\002\ufff7\004\ufff7" +
    "\032\ufff7\033\ufff7\001\002\000\012\002\ufff4\004\ufff4\032" +
    "\ufff4\033\ufff4\001\002\000\056\010\ufff2\011\ufff2\013\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\033\ufff2\034\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\047\ufff2\053\ufff2\055\ufff2\001" +
    "\002\000\016\032\uffeb\033\uffeb\034\uffeb\037\uffeb\052\uffeb" +
    "\055\uffeb\001\002\000\016\032\uffea\033\uffea\034\uffea\037" +
    "\uffea\052\uffea\055\uffea\001\002\000\016\032\uffe7\033\uffe7" +
    "\034\uffe7\037\uffe7\052\uffe7\055\uffe7\001\002\000\016\032" +
    "\uffec\033\uffec\034\uffec\037\uffec\052\uffec\055\uffec\001\002" +
    "\000\016\032\uffe9\033\uffe9\034\uffe9\037\uffe9\052\uffe9\055" +
    "\uffe9\001\002\000\016\032\uffe6\033\uffe6\034\uffe6\037\uffe6" +
    "\052\uffe6\055\uffe6\001\002\000\012\032\206\033\216\034" +
    "\205\052\215\001\002\000\016\032\uffe5\033\uffe5\034\uffe5" +
    "\037\uffe5\052\uffe5\055\uffe5\001\002\000\004\032\176\001" +
    "\002\000\016\032\uffe8\033\uffe8\034\uffe8\037\uffe8\052\uffe8" +
    "\055\uffe8\001\002\000\004\054\177\001\002\000\004\032" +
    "\202\001\002\000\006\037\213\055\212\001\002\000\006" +
    "\037\uffe1\055\uffe1\001\002\000\004\036\203\001\002\000" +
    "\016\014\174\016\170\017\175\020\166\021\171\032\173" +
    "\001\002\000\012\032\206\034\205\037\uffdf\055\uffdf\001" +
    "\002\000\016\014\174\016\170\017\175\020\166\021\171" +
    "\032\173\001\002\000\004\031\207\001\002\000\016\014" +
    "\174\016\170\017\175\020\166\021\171\032\173\001\002" +
    "\000\016\032\206\033\uffe3\034\205\037\uffe3\052\uffe3\055" +
    "\uffe3\001\002\000\016\032\206\033\uffe4\034\uffe4\037\uffe4" +
    "\052\uffe4\055\uffe4\001\002\000\016\032\uffe2\033\uffe2\034" +
    "\uffe2\037\uffe2\052\uffe2\055\uffe2\001\002\000\004\032\202" +
    "\001\002\000\006\037\uffe0\055\uffe0\001\002\000\004\053" +
    "\217\001\002\000\012\002\ufff6\004\ufff6\032\ufff6\033\ufff6" +
    "\001\002\000\004\033\220\001\002\000\012\002\ufff5\004" +
    "\ufff5\032\ufff5\033\ufff5\001\002\000\056\010\uffee\011\uffee" +
    "\013\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\033\uffee\034\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\053\uffee\055" +
    "\uffee\001\002\000\004\002\uffff\001\002\000\004\002\ufffd" +
    "\001\002\000\032\022\226\023\043\024\047\033\225\034" +
    "\036\040\037\041\050\042\044\043\045\044\046\045\040" +
    "\046\041\001\002\000\012\002\ufffa\004\004\032\010\033" +
    "\005\001\002\000\020\007\021\012\023\016\032\017\034" +
    "\032\033\033\031\052\025\001\002\000\030\023\043\024" +
    "\047\033\230\034\036\040\037\041\050\042\044\043\045" +
    "\044\046\045\040\046\041\001\002\000\012\002\ufff8\004" +
    "\004\032\010\033\005\001\002\000\004\002\ufff9\001\002" +
    "\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\002\010\003\006\004\005\001\001\000" +
    "\016\006\223\007\021\010\025\011\026\013\023\014\027" +
    "\001\001\000\006\003\222\004\005\001\001\000\006\003" +
    "\221\004\005\001\001\000\002\001\001\000\004\005\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\220\001\001\000\012\015\171\016\166\021\163\022\164" +
    "\001\001\000\004\005\162\001\001\000\004\012\155\001" +
    "\001\000\004\005\154\001\001\000\016\006\034\007\021" +
    "\010\025\011\026\013\023\014\027\001\001\000\016\006" +
    "\147\007\021\010\025\011\026\013\023\014\027\001\001" +
    "\000\002\001\001\000\016\006\102\007\021\010\025\011" +
    "\026\013\023\014\027\001\001\000\002\001\001\000\016" +
    "\006\100\007\021\010\025\011\026\013\023\014\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\073\007\021\010\025\011\026\013\023\014" +
    "\027\001\001\000\002\001\001\000\004\005\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\062\007" +
    "\021\010\025\011\026\013\023\014\027\001\001\000\016" +
    "\006\060\007\021\010\025\011\026\013\023\014\027\001" +
    "\001\000\016\006\057\007\021\010\025\011\026\013\023" +
    "\014\027\001\001\000\016\006\056\007\021\010\025\011" +
    "\026\013\023\014\027\001\001\000\002\001\001\000\016" +
    "\006\055\007\021\010\025\011\026\013\023\014\027\001" +
    "\001\000\016\006\054\007\021\010\025\011\026\013\023" +
    "\014\027\001\001\000\016\006\053\007\021\010\025\011" +
    "\026\013\023\014\027\001\001\000\016\006\052\007\021" +
    "\010\025\011\026\013\023\014\027\001\001\000\016\006" +
    "\051\007\021\010\025\011\026\013\023\014\027\001\001" +
    "\000\016\006\050\007\021\010\025\011\026\013\023\014" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\063\007\021\010\025\011\026\013\023\014" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\066\007\021\010\025\011\026\013\023\014\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\071\007\021\010\025\011\026\013\023\014" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\075\007\021\010\025\011\026\013" +
    "\023\014\027\001\001\000\002\001\001\000\012\010\077" +
    "\011\026\013\023\014\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\105\007\021\010\025\011\026\013\023\014\027\001" +
    "\001\000\020\006\111\007\021\010\025\011\026\012\106" +
    "\013\023\014\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\073\007\021\010\025\011\026\012\123" +
    "\013\023\014\027\001\001\000\016\006\114\007\021\010" +
    "\025\011\026\013\023\014\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\117\007\021\010\025\011\026\013\023\014\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\122\007\021\010\025\011\026\013\023\014\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\136\001\001\000\016\006\127\007\021\010\025" +
    "\011\026\013\023\014\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\132\007\021\010\025\011\026" +
    "\013\023\014\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\135\007\021\010\025\011\026\013\023" +
    "\014\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\123\001\001\000\002\001\001" +
    "\000\014\007\146\010\025\011\026\013\023\014\027\001" +
    "\001\000\014\007\145\010\025\011\026\013\023\014\027" +
    "\001\001\000\014\007\144\010\025\011\026\013\023\014" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\151\007\021\010" +
    "\025\011\026\013\023\014\027\001\001\000\002\001\001" +
    "\000\016\006\153\007\021\010\025\011\026\013\023\014" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\157\007\021\010\025\011\026\013" +
    "\023\014\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\200\020\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\203\016\166" +
    "\021\163\022\164\001\001\000\002\001\001\000\012\015" +
    "\210\016\166\021\163\022\164\001\001\000\002\001\001" +
    "\000\012\015\207\016\166\021\163\022\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\231\004\005\001\001\000\016\006\226" +
    "\007\021\010\025\011\026\013\023\014\027\001\001\000" +
    "\002\001\001\000\006\003\230\004\005\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s = null;
    public boolean errorDetected = false;
    public boolean parsingCompleted = false;

    @Override
    public void syntax_error(Symbol s){
        this.s = s;
        if (s.value != null) {
            System.err.println("Error de sintaxis. Línea: " + (s.left + 1) + " Columna: " + (s.right + 1) + ", Texto: \"" + s.value + "\"");
            errorDetected = true;
        } else {
            errorDetected = false;
        }
    }

    public Symbol getS(){
        return this.s;
    }

    public Boolean errorD(){
        return errorDetected;
    }

    @Override
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        super.report_fatal_error(message, info);
        System.err.println("==========report_fatal_error==========");
        System.err.println(message);
        System.err.println(info);
    }

    @Override
    public void done_parsing() {
        if (!errorDetected) {
            System.out.println("Análisis sintáctico completado sin errores.");
        }
        parsingCompleted = true; // Set the parsing completed flag
        System.err.println("==========done_parsing()==========");
        System.err.println("errorDetected es: " + errorDetected);
        System.err.println("parsingCompleted es: " + parsingCompleted);        
    }

    public boolean isParsingCompleted() {
        System.err.println("==========isParsingCompleted()==========");  
        System.err.println("parsingCompleted es: " + parsingCompleted);  
        return parsingCompleted;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= FUNCION BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE ::= Linea BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQUE ::= Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE ::= Let EXPRESION Linea BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUE ::= Let EXPRESION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQUE ::= Let EXPRESION Igual EXPRESION Linea BLOQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE ::= Let EXPRESION Igual EXPRESION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCION ::= Identificador ARGUMENTOS Igual EXPRESION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCION ::= Identificador DosPuntos_Doble TIPO Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= Identificador DosPuntos_Doble TIPO Parentesis_a Parentesis_c Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= Identificador ARGUMENTOS GUARDAS Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= Identificador Igual EXPRESION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARGUMENTOS ::= Identificador ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGUMENTOS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARGUMENTOS ::= Int ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARGUMENTOS ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARGUMENTOS ::= Double ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARGUMENTOS ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= TIPOSIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= TIPOFUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= TIPOESTRUCTURADEDATOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPOSIMPLE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPOSIMPLE ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPOSIMPLE ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPOSIMPLE ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPOSIMPLE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOSIMPLE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPOFUNCION ::= TIPO Flecha_D TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOFUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPOFUNCION ::= TIPO Identificador Flecha_GD TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOFUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPOESTRUCTURADEDATOS ::= Data Identificador Llave_a CAMPOS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPOESTRUCTURADEDATOS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CAMPOS ::= CAMPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CAMPOS ::= CAMPOS Coma CAMPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CAMPO ::= Identificador DosPuntos_Doble TIPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION Igual_a EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION Mayor_que EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION Mayor_igual_que EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION Menor_que EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION Menor_igual_que EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION And EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION Or EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION Flecha_D EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION Flecha_D Cadena EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION Flecha_D Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= Linea EXPRESION Linea EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= Linea EXPRESION Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= Linea EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TERM ::= TERM Multiplicacion TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TERM ::= TERM Division TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TERM ::= TERM Modulo TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TERM ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FACTOR ::= FACTOR Potencia FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FACTOR ::= ATOM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATOM ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATOM ::= Identificador ARGUMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATOM ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ATOM ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ATOM ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATOM ::= Identificador Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATOM ::= Identificador Parentesis_a EXPRESION Parentesis_c Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ATOM ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ATOM ::= CASO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATOM",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF_ELSE ::= If EXPRESION Then EXPRESION Else EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASO ::= Case EXPRESION Of Llave_a GUARDAS Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASO ::= Case EXPRESION Of Llave_a EXPRESION Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASO ::= Case EXPRESION Of EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // GUARDAS ::= Guarda EXPRESION Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // GUARDAS ::= Guarda Cadena Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // GUARDAS ::= Guarda EXPRESION Igual Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // GUARDAS ::= Guarda Cadena Igual Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // GUARDAS ::= GUARDAS Guarda EXPRESION Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // GUARDAS ::= GUARDAS Guarda Cadena Igual EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // GUARDAS ::= GUARDAS Guarda EXPRESION Igual Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // GUARDAS ::= GUARDAS Guarda Cadena Igual Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // GUARDAS ::= Linea GUARDAS Linea GUARDAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // GUARDAS ::= Linea GUARDAS Linea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // GUARDAS ::= Linea GUARDAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GUARDAS",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
